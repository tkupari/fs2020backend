{"version":3,"sources":["services/phonebook.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","id","put","delete","Notification","message","messageClass","className","Filter","filter","setFilter","value","onChange","event","target","PersonForm","persons","setPersons","notify","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","preventDefault","length","existing","find","p","name","window","confirm","personData","number","phonebookService","map","concat","type","Person","person","deleteperson","onClick","Persons","setpersons","error","deletePerson","_response","catch","personsToShow","toLowerCase","includes","key","App","setMessage","setMessageClass","useEffect","initialData","showMessage","setTimeout","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"kPAEMA,EAAU,oCAkBD,EAhBA,WACb,OAAOC,IAAMC,IAAIF,GAASG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAevC,EAZA,SAACC,GACd,OAAOL,IAAMM,KAAKP,EAASM,GAAWH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAWnD,EARA,SAACG,EAAIF,GAClB,OAAOL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAAWH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAO7D,EAJC,SAACG,GACf,OAAOP,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BQ,IAAML,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCd9DM,EAAe,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAC/B,OAAe,OAAZD,EACM,KAGP,yBAAKE,UAAW,WAAaD,GAC1BD,IAKDG,EAAS,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAIxB,OACI,kDACoB,2BAAOC,MAAOF,EAAQG,SALnB,SAACC,GAC1BH,EAAUG,EAAMC,OAAOH,YASrBI,EAAa,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OAAa,EACtBC,mBAAS,IADa,mBAC9CC,EAD8C,KACrCC,EADqC,OAElBF,mBAAS,IAFS,mBAE9CG,EAF8C,KAEnCC,EAFmC,KAmCtD,OACI,0BAAMC,SA1BM,SAACX,GAEf,GADAA,EAAMY,iBACHL,EAAQM,OAAS,EAAG,CACrB,IAAMC,EAAWX,EAAQY,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAASV,KAC9C,GAAGO,GACD,GAAGI,OAAOC,QAAP,UAAkBZ,EAAlB,4EAAqG,CACtG,IAAMa,EAAU,2BAAON,GAAP,IAAiBO,OAAQZ,IACzCa,EAAwBR,EAAS1B,GAAIgC,GAClCrC,MAAK,SAAAG,GACJkB,EAAWD,EAAQoB,KAAI,SAAAP,GAAC,OAAIA,EAAE5B,KAAO0B,EAAS1B,GAAK4B,EAAI9B,MACvDmB,EAAO,WAAD,OAAYnB,EAAU+B,gBAKlCK,EADmB,CAACL,KAAMV,EAASc,OAAQZ,IAExC1B,MAAK,SAAAG,GACJkB,EAAWD,EAAQqB,OAAOtC,IAC1BmB,EAAO,SAAD,OAAUnB,EAAU+B,UAGhCT,EAAW,IACXE,EAAa,OAKX,sCACQ,2BAAOZ,MAAOS,EAASR,SAlCZ,SAACC,GACxBQ,EAAWR,EAAMC,OAAOH,UAgCpB,WAEU,2BAAOA,MAAOW,EAAWV,SAhCd,SAACC,GAC1BU,EAAaV,EAAMC,OAAOH,WAiCtB,6BACE,4BAAQ2B,KAAK,UAAb,UAMJC,EAAS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aAExB,OACE,6BACGD,EAAOV,KADV,IACiBU,EAAON,OACtB,4BAAQQ,QAAS,kBAAMD,EAAaD,KAApC,YAKAG,EAAU,SAAC,GAAoD,IAAlD3B,EAAiD,EAAjDA,QAASP,EAAwC,EAAxCA,OAAQmC,EAAgC,EAAhCA,WAAY1B,EAAoB,EAApBA,OAAQ2B,EAAY,EAAZA,MAChDC,EAAe,SAACN,GACpBL,EAAwBK,EAAOvC,IAAIL,MAAK,SAAAmD,GACtC7B,EAAO,GAAD,OAAIsB,EAAOV,KAAX,aACNc,EAAW5B,EAAQP,QAAO,SAAAoB,GAAC,OAAIA,EAAE5B,KAAOuC,EAAOvC,UAC9C+C,OAAM,SAAAD,GACPF,EAAM,GAAD,OAAIL,EAAOV,KAAX,0CACLc,EAAW5B,EAAQP,QAAO,SAAAoB,GAAC,OAAIA,EAAE5B,KAAOuC,EAAOvC,WAG7CgD,EAAgBxC,EAAOiB,OAAS,EAClCV,EAAQP,QAAO,SAAAoB,GAAC,OAAIA,EAAEC,KAAKoB,cAAcC,SAAS1C,MAClDO,EACJ,OACE,6BACCiC,EAAcb,KAAI,SAAAI,GAAM,OAAI,kBAAC,EAAD,CAAQY,IAAKZ,EAAOV,KAAMU,OAAQA,EAAQC,aAAcK,SAgD1EO,EA3CH,WAAO,IAAD,EACgBlC,mBAAS,IADzB,mBACRH,EADQ,KACCC,EADD,OAGgBE,mBAAS,IAHzB,mBAGRV,EAHQ,KAGCC,EAHD,OAIgBS,mBAAS,MAJzB,mBAIRd,EAJQ,KAICiD,EAJD,OAK0BnC,mBAAS,QALnC,mBAKRb,EALQ,KAKMiD,EALN,KAYhBC,qBALiB,WACfrB,IAA0BvC,MAAK,SAAA6D,GAAW,OACxCxC,EAAWwC,QAGK,IAEpB,IAAMC,EAAc,SAACrD,EAASC,GAC5BgD,EAAWjD,GACXkD,EAAgBjD,GAChBqD,YAAW,WACTL,EAAW,QACV,MAGCpC,EAAS,SAACb,GACdqD,EAAYrD,EAAS,SAOvB,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcA,QAASA,EAASC,aAAcA,IAC9C,kBAAC,EAAD,CAAQG,OAAQA,EAAQC,UAAWA,IACnC,yCACA,kBAAC,EAAD,CAAYM,QAASA,EAASC,WAAYA,EAAYC,OAAQA,IAC9D,uCACA,kBAAC,EAAD,CAASF,QAASA,EAASP,OAAQA,EAAQmC,WAAY3B,EAAYC,OAAQA,EAAQ2B,MAZzE,SAACxC,GACbqD,EAAYrD,EAAS,cCtHLuD,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3E,MAAK,SAAA4E,GACJA,EAAaC,gBAEdzB,OAAM,SAAAH,GACL6B,QAAQ7B,MAAMA,EAAMxC,c","file":"static/js/main.31bcda6b.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl).then(response => response.data)\n}\n\nconst create = (newPerson) => {\n  return axios.post(baseUrl, newPerson).then(response => response.data)\n}\n\nconst update = (id, newPerson) => {\n  return axios.put(`${baseUrl}/${id}`, newPerson).then(response => response.data)\n}\n\nconst remove =  (id) => {\n  return axios.delete(`${baseUrl}/${id}`).then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }\n","import React, { useState, useEffect } from 'react'\nimport phonebookService from './services/phonebook'\n\nconst Notification = ({ message, messageClass }) => {\n  if(message === null)\n    return null\n\n  return (\n    <div className={'message ' + messageClass}>\n      {message}\n    </div>\n  )\n}\n\nconst Filter = ({ filter, setFilter }) => {\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n  return (\n      <div>\n        filter shown with <input value={filter} onChange={handleFilterChange}/>\n      </div>\n  )\n}\n\nconst PersonForm = ({ persons, setPersons, notify }) => {\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const addName = (event) => {\n    event.preventDefault()\n    if(newName.length > 0) {\n      const existing = persons.find(p => p.name === newName)\n      if(existing) {\n        if(window.confirm(`${newName} is already added to phonebook. Do you want to update the phone number?`)) {\n          const personData = {...existing, number: newNumber}\n          phonebookService.update(existing.id, personData)\n            .then(newPerson => {\n              setPersons(persons.map(p => p.id !== existing.id ? p : newPerson))\n              notify(`Updated ${newPerson.name}`)\n            })\n        }\n      } else {\n        const personData = {name: newName, number: newNumber}\n        phonebookService.create(personData)\n          .then(newPerson => {\n            setPersons(persons.concat(newPerson))\n            notify(`Added ${newPerson.name}`)\n          })\n      }\n      setNewName('')\n      setNewNumber('')\n    }\n  }\n  return (\n      <form onSubmit={addName}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange}/>\n          number: <input value={newNumber} onChange={handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nconst Person = ({ person, deleteperson }) => {\n\n  return (\n    <div>\n      {person.name} {person.number}\n      <button onClick={() => deleteperson(person)}>delete</button>\n    </div>\n  )\n}\n\nconst Persons = ({ persons, filter, setpersons, notify, error }) => {\n  const deletePerson = (person) => {\n    phonebookService.remove(person.id).then(_response => {\n      notify(`${person.name} deleted`)\n      setpersons(persons.filter(p => p.id !== person.id))\n    }).catch(_response => {\n      error(`${person.name} has already been deleted from server`)\n      setpersons(persons.filter(p => p.id !== person.id))\n    })\n  }\n  const personsToShow = filter.length > 0\n    ? persons.filter(p => p.name.toLowerCase().includes(filter))\n    : persons\n  return (\n    <div>\n    {personsToShow.map(person => <Person key={person.name} person={person} deleteperson={deletePerson} />)}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([\n  ])\n  const [ filter,  setFilter ] =  useState('')\n  const [ message, setMessage ] = useState(null)\n  const [ messageClass, setMessageClass ] = useState('info')\n\n  const loadData = () => {\n    phonebookService.getAll().then(initialData => \n      setPersons(initialData)\n    )\n  }\n  useEffect(loadData, [])\n\n  const showMessage = (message, messageClass) => {\n    setMessage(message)\n    setMessageClass(messageClass)\n    setTimeout(() => {\n      setMessage(null)\n    }, 2000)\n  }\n\n  const notify = (message) => {\n    showMessage(message, 'info')\n  }\n\n  const error = (message) => {\n    showMessage(message, 'error')\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} messageClass={messageClass} />\n      <Filter filter={filter} setFilter={setFilter} />\n      <h2>add a new</h2>\n      <PersonForm persons={persons} setPersons={setPersons} notify={notify}/>\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} setpersons={setPersons} notify={notify} error={error}/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}